var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// src/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => src_default
});
var import_coc = __toModule(require("coc.nvim"));

// src/constants.ts
var LSP_NAME = "cl-lsp";
var EXTENSION_NAME = "coc-cl";

// src/index.ts
"use strict";
var languageClient;
function activate(context) {
  const config = import_coc.workspace.getConfiguration(EXTENSION_NAME);
  if (!config.get("enable", true)) {
    return;
  }
  const cl = {
    command: config.get("serverPath", "cl-lsp"),
    args: config.get("serverArguments", [])
  };
  const toolchain = config.get("toolchainPath", "");
  if (toolchain) {
    cl.options = {env: {...process.env, CL_LSP_TOOLCHAIN_PATH: toolchain}};
  }
  const serverOptions = cl;
  const clientOptions = {
    documentSelector: ["lisp"]
  };
  languageClient = new import_coc.LanguageClient(LSP_NAME, "Common Lisp Language Server", serverOptions, clientOptions);
  context.subscriptions.push(languageClient.start());
  context.subscriptions.push(import_coc.commands.registerCommand("lisp.interrupt", () => languageClient.sendNotification("lisp/interrupt", {})));
}
var src_default = activate;
